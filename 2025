import json
from typing import Dict, Set, Any

def get_all_keys(data: Dict[str, Any], parent_key: str = '', keys: Set[str] = None) -> Set[str]:
    """
    Recursively collect all keys from a nested dictionary.
    
    Args:
        data: Dictionary to extract keys from
        parent_key: Parent key for nested dictionaries
        keys: Set to store all keys
    
    Returns:
        Set of all keys including nested keys using dot notation
    """
    if keys is None:
        keys = set()
        
    for key, value in data.items():
        current_key = f"{parent_key}.{key}" if parent_key else key
        keys.add(current_key)
        
        if isinstance(value, dict):
            get_all_keys(value, current_key, keys)
    
    return keys

def compare_json_keys(json1: str, json2: str) -> dict:
    """
    Compare keys between two JSON strings.
    
    Args:
        json1: First JSON string
        json2: Second JSON string
    
    Returns:
        Dictionary containing missing and additional keys
    """
    try:
        # Parse JSON strings
        dict1 = json.loads(json1)
        dict2 = json.loads(json2)
        
        # Get all keys from both JSONs
        keys1 = get_all_keys(dict1)
        keys2 = get_all_keys(dict2)
        
        # Find differences
        missing_keys = keys1 - keys2
        additional_keys = keys2 - keys1
        
        return {
            'missing_keys': sorted(list(missing_keys)),
            'additional_keys': sorted(list(additional_keys))
        }
        
    except json.JSONDecodeError as e:
        raise ValueError(f"Invalid JSON format: {str(e)}")
    except Exception as e:
        raise Exception(f"Error comparing JSONs: {str(e)}")

# Example usage
if __name__ == "__main__":
    # Example JSON strings
    json1 = '''
    {
        "name": "John",
        "age": 30,
        "address": {
            "street": "123 Main St",
            "city": "Boston"
        }
    }
    '''
    
    json2 = '''
    {
        "name": "John",
        "email": "john@example.com",
        "address": {
            "street": "123 Main St",
            "state": "MA"
        }
    }
    '''
    
    try:
        result = compare_json_keys(json1, json2)
        
        print("Keys present in first JSON but missing in second:")
        for key in result['missing_keys']:
            print(f"  - {key}")
            
        print("\nKeys present in second JSON but missing in first:")
        for key in result['additional_keys']:
            print(f"  + {key}")
            
    except Exception as e:
        print(f"Error: {str(e)}")
