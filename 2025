def compare_json(json1, json2, path=""):
    """
    Compare two JSON objects and return their differences.
    
    Args:
        json1: First JSON object
        json2: Second JSON object
        path: Current path in the JSON structure (used for recursive calls)
        
    Returns:
        dict: Dictionary containing added, removed, and modified keys with their values
    """
    differences = {
        "added": {},
        "removed": {},
        "modified": {}
    }
    
    # Helper function to format the current path
    def make_path(path, key):
        return f"{path}.{key}".lstrip(".")
    
    # Compare key sets
    json1_keys = set(json1.keys() if isinstance(json1, dict) else range(len(json1)))
    json2_keys = set(json2.keys() if isinstance(json2, dict) else range(len(json2)))
    
    # Find added keys
    for key in json2_keys - json1_keys:
        differences["added"][make_path(path, key)] = json2[key]
    
    # Find removed keys
    for key in json1_keys - json2_keys:
        differences["removed"][make_path(path, key)] = json1[key]
    
    # Check modified values for common keys
    for key in json1_keys & json2_keys:
        current_path = make_path(path, key)
        
        if isinstance(json1[key], dict) and isinstance(json2[key], dict):
            # Recursive call for nested dictionaries
            nested_diff = compare_json(json1[key], json2[key], current_path)
            for diff_type, diff_values in nested_diff.items():
                differences[diff_type].update(diff_values)
        
        elif isinstance(json1[key], list) and isinstance(json2[key], list):
            # Compare lists
            if json1[key] != json2[key]:
                differences["modified"][current_path] = {
                    "old_value": json1[key],
                    "new_value": json2[key]
                }
        
        elif json1[key] != json2[key]:
            # Compare primitive values
            differences["modified"][current_path] = {
                "old_value": json1[key],
                "new_value": json2[key]
            }
    
    return differences

# Example usage
if __name__ == "__main__":
    # Sample JSON objects
    json1 = {
        "name": "John",
        "age": 30,
        "address": {
            "street": "123 Main St",
            "city": "New York"
        },
        "hobbies": ["reading", "gaming"]
    }
    
    json2 = {
        "name": "John",
        "age": 31,
        "address": {
            "street": "456 Oak St",
            "city": "New York",
            "zipcode": "10001"
        },
        "interests": ["coding", "music"]
    }
    
    # Compare the JSONs
    differences = compare_json(json1, json2)
    
    # Print results in a readable format
    print("Changes found between JSON objects:\n")
    
    if differences["added"]:
        print("Added keys:")
        for key, value in differences["added"].items():
            print(f"  {key}: {value}")
            
    if differences["removed"]:
        print("\nRemoved keys:")
        for key, value in differences["removed"].items():
            print(f"  {key}: {value}")
            
    if differences["modified"]:
        print("\nModified keys:")
        for key, value in differences["modified"].items():
            print(f"  {key}:")
            print(f"    Old value: {value['old_value']}")
            print(f"    New value: {value['new_value']}")
