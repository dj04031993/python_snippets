
import pandas as pd

def compare_by_subclient(prod_df, qa_df):
    # Get all distinct sub_client_name values from prod_df
    distinct_subclients = prod_df['sub_client_name'].unique().tolist()
    print(f"Found {len(distinct_subclients)} distinct sub-clients in production data")
    
    # Dictionary to store results
    results = {}
    
    # Iterate through each sub-client
    for subclient in distinct_subclients:
        print(f"\nAnalyzing sub-client: {subclient}")
        
        # Extract combinations from production dataframe for this sub-client
        prod_combos = set()
        filtered_prod = prod_df[prod_df['sub_client_name'] == subclient]
        for _, row in filtered_prod.iterrows():
            combo = (row['cu_system'], row['cu_prin'], row['cu_agent'])
            prod_combos.add(combo)
        
        # Extract combinations from QA dataframe for this sub-client
        qa_combos = set()
        # Note: Using strip() to handle potential whitespace differences
        filtered_qa = qa_df[qa_df['SUB CLIENT_NAME'].str.strip() == subclient.strip()]
        for _, row in filtered_qa.iterrows():
            combo = (row['SYS NUM'], row['PRIN NUM'], row['AGENT_NUMBER'])
            qa_combos.add(combo)
        
        # Find differences
        in_prod_not_qa = prod_combos - qa_combos
        in_qa_not_prod = qa_combos - prod_combos
        
        # Store results
        results[subclient] = {
            'prod_count': len(prod_combos),
            'qa_count': len(qa_combos),
            'in_prod_not_qa': list(in_prod_not_qa),
            'in_qa_not_prod': list(in_qa_not_prod),
            'in_prod_not_qa_count': len(in_prod_not_qa),
            'in_qa_not_prod_count': len(in_qa_not_prod)
        }
        
        # Print summary for this sub-client
        print(f"  Production combinations: {len(prod_combos)}")
        print(f"  QA combinations: {len(qa_combos)}")
        print(f"  In production but not in QA: {len(in_prod_not_qa)}")
        print(f"  In QA but not in production: {len(in_qa_not_prod)}")
        
        # Print details of differences if they exist
        if in_prod_not_qa:
            print("\n  Details of combinations in production but not in QA:")
            for i, combo in enumerate(in_prod_not_qa, 1):
                print(f"    {i}. System: {combo[0]}, Prin: {combo[1]}, Agent: {combo[2]}")
        
        if in_qa_not_prod:
            print("\n  Details of combinations in QA but not in production:")
            for i, combo in enumerate(in_qa_not_prod, 1):
                print(f"    {i}. System: {combo[0]}, Prin: {combo[1]}, Agent: {combo[2]}")
    
    return results

# Run the comparison
results = compare_by_subclient(prod_df, qa_df)

# Create a summary dataframe
summary_data = []
for subclient, data in results.items():
    summary_data.append({
        'sub_client_name': subclient,
        'prod_combinations': data['prod_count'],
        'qa_combinations': data['qa_count'],
        'in_prod_not_qa': data['in_prod_not_qa_count'],
        'in_qa_not_prod': data['in_qa_not_prod_count']
    })

summary_df = pd.DataFrame(summary_data)
print("\nSummary of all sub-clients:")
print(summary_df)

# Export detailed results to CSV files if needed
# Uncomment and use the following code if you want to export detailed differences

# Create detailed dataframes for export
detailed_prod_not_qa = []
detailed_qa_not_prod = []

for subclient, data in results.items():
    # Process prod not in QA
    for combo in data['in_prod_not_qa']:
        detailed_prod_not_qa.append({
            'sub_client_name': subclient,
            'system': combo[0],
            'prin': combo[1],
            'agent': combo[2]
        })
    
    # Process QA not in prod
    for combo in data['in_qa_not_prod']:
        detailed_qa_not_prod.append({
            'sub_client_name': subclient,
            'system': combo[0],
            'prin': combo[1],
            'agent': combo[2]
        })

# Convert to dataframes
if detailed_prod_not_qa:
    prod_not_qa_df = pd.DataFrame(detailed_prod_not_qa)
    # prod_not_qa_df.to_csv('prod_not_in_qa.csv', index=False)
    
if detailed_qa_not_prod:
    qa_not_prod_df = pd.DataFrame(detailed_qa_not_prod)
    # qa_not_prod_df.to_csv('qa_not_in_prod.csv', index=False)
