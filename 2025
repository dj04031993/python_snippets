import json

def add_double_quotes(json_obj):
    """
    Recursively ensure all keys and string values in the JSON object have double quotes.

    :param json_obj: dict or list, the JSON object to process
    :return: dict or list, the updated JSON object with double-quoted keys and values
    """
    if isinstance(json_obj, dict):
        return {f'"{key}"': add_double_quotes(value) if isinstance(value, (dict, list)) else f'"{value}"' if isinstance(value, str) else value for key, value in json_obj.items()}
    elif isinstance(json_obj, list):
        return [add_double_quotes(item) for item in json_obj]
    return f'"{json_obj}"' if isinstance(json_obj, str) else json_obj

def compare_json(input_json, output_json):
    """
    Compares input and output JSONs to check for missing and additional key-value pairs.

    :param input_json: dict, the input JSON
    :param output_json: dict, the output JSON
    :return: tuple, (missing_pairs, additional_pairs)
    """
    missing_pairs = {}
    additional_pairs = {}

    # Add double quotes to all keys and string values
    input_json = add_double_quotes(input_json)
    output_json = add_double_quotes(output_json)

    # Convert keys back to normal strings for comparison
    normalized_input = {key.strip('"'): value for key, value in input_json.items()}
    normalized_output = {key.strip('"'): value for key, value in output_json.items()}

    # Check for missing key-value pairs in the output JSON
    for key, value in normalized_input.items():
        if key not in normalized_output or normalized_output[key] != value:
            missing_pairs[key] = value

    # Check for additional key-value pairs in the output JSON
    for key, value in normalized_output.items():
        if key not in normalized_input:
            additional_pairs[key] = value

    return missing_pairs, additional_pairs

# Example Usage
if __name__ == "__main__":
    # Prompt user for Input JSON
    input_json_str = input("Enter the Input JSON: ")
    output_json_str = input("Enter the Output JSON: ")

    try:
        input_json = json.loads(input_json_str)
        output_json = json.loads(output_json_str)

        # Compare JSONs
        missing, additional = compare_json(input_json, output_json)

        # Display Results
        print("\nMissing Key-Value Pairs in Output JSON:")
        print(json.dumps(missing, indent=4))

        print("\nAdditional Key-Value Pairs in Output JSON:")
        print(json.dumps(additional, indent=4))
    except json.JSONDecodeError as e:
        print(f"Error parsing JSON: {e}")
