
@ECHO OFF
SET klocation=D:\kafka_2.11-1.0.0
SET kTopic=
SET brokerList=
SET configLocation=D:\kafka_2.11-1.0.0\config\client-ssl.properties
SET TEMP_FILE=%TEMP%\kafka_messages_%RANDOM%.json

:: Create a log file
echo [%date% %time%] Starting Kafka automation workflow > kafka_automation.log

:: Step 1: Publish messages to Kafka topic
echo [%date% %time%] Publishing messages to topic %kTopic% >> kafka_automation.log
echo Publishing messages to topic %kTopic%...

:: Create temporary JSON file with messages to publish
echo {"id": "msg001", "type": "test", "value": 100, "status": "pending"} > %TEMP%\messages_to_publish.json
echo {"id": "msg002", "type": "test", "value": 200, "status": "complete"} >> %TEMP%\messages_to_publish.json
echo {"id": "msg003", "type": "test", "value": 300, "status": "pending"} >> %TEMP%\messages_to_publish.json

:: Publish messages using your working command pattern
for /f "tokens=*" %%a in (%TEMP%\messages_to_publish.json) do (
    echo Publishing: %%a
    echo %%a | call %klocation%\bin\windows\kafka-console-producer.bat --broker-list %brokerList% --topic %kTopic% --request-timeout-ms 60000 --producer.config %configLocation%
    if errorlevel 1 (
        echo [%date% %time%] ERROR: Failed to publish message >> kafka_automation.log
        echo ERROR: Failed to publish message
        pause
        exit /b 1
    )
    timeout /t 1 /nobreak > nul
)

:: Step 2: Consume messages from another Kafka topic
echo [%date% %time%] Consuming messages from topic %kTopic% >> kafka_automation.log
echo Consuming messages from topic %kTopic%...

:: Set consumer topic - you might want to change this if consuming from a different topic
SET kConsumerTopic=%kTopic%

:: Consume messages with 20-second timeout
start /b cmd /c "%klocation%\bin\windows\kafka-console-consumer.bat --bootstrap-server %brokerList% --topic %kConsumerTopic% --from-beginning --timeout-ms 20000 --consumer.config %configLocation% > %TEMP_FILE% 2>&1"

:: Wait for the timeout duration
echo Waiting for messages (20 seconds)...
timeout /t 20 /nobreak > nul

:: Check if we received any messages
if not exist "%TEMP_FILE%" (
    echo [%date% %time%] ERROR: Failed to create output file >> kafka_automation.log
    echo ERROR: Failed to create output file
    pause
    exit /b 1
)

:: Check if file is empty
for %%I in (%TEMP_FILE%) do if %%~zI equ 0 (
    echo [%date% %time%] WARNING: No messages received >> kafka_automation.log
    echo WARNING: No messages received
)

:: Step 3: Perform assertions on the consumed messages
echo [%date% %time%] Performing assertions on consumed messages >> kafka_automation.log
echo Performing assertions on consumed messages...

:: Count total messages
set /a msg_count=0
for /f "tokens=*" %%a in (%TEMP_FILE%) do set /a msg_count+=1
echo [%date% %time%] Found %msg_count% messages to validate >> kafka_automation.log
echo Found %msg_count% messages to validate

:: Perform JSON key-value assertions
set /a assertion_failures=0

:: Check for specific values
findstr /c:"\"status\":\"pending\"" "%TEMP_FILE%" > nul
if %errorlevel% neq 0 (
    echo [%date% %time%] ASSERTION FAILED: No messages with status 'pending' found >> kafka_automation.log
    echo ASSERTION FAILED: No messages with status 'pending' found
    set /a assertion_failures+=1
) else (
    echo [%date% %time%] ASSERTION PASSED: Found messages with status 'pending' >> kafka_automation.log
    echo ASSERTION PASSED: Found messages with status 'pending'
)

findstr /c:"\"type\":\"test\"" "%TEMP_FILE%" > nul
if %errorlevel% neq 0 (
    echo [%date% %time%] ASSERTION FAILED: No messages with type 'test' found >> kafka_automation.log
    echo ASSERTION FAILED: No messages with type 'test' found
    set /a assertion_failures+=1
) else (
    echo [%date% %time%] ASSERTION PASSED: Found messages with type 'test' >> kafka_automation.log
    echo ASSERTION PASSED: Found messages with type 'test'
)

:: Check for specific IDs
findstr /c:"\"id\":\"msg001\"" "%TEMP_FILE%" > nul
if %errorlevel% neq 0 (
    echo [%date% %time%] ASSERTION FAILED: Message with ID 'msg001' not found >> kafka_automation.log
    echo ASSERTION FAILED: Message with ID 'msg001' not found
    set /a assertion_failures+=1
) else (
    echo [%date% %time%] ASSERTION PASSED: Found message with ID 'msg001' >> kafka_automation.log
    echo ASSERTION PASSED: Found message with ID 'msg001'
)

:: Report assertion results
if %assertion_failures% gtr 0 (
    echo [%date% %time%] ASSERTIONS SUMMARY: %assertion_failures% assertion(s) failed >> kafka_automation.log
    echo ASSERTIONS SUMMARY: %assertion_failures% assertion(s) failed
) else (
    echo [%date% %time%] ASSERTIONS SUMMARY: All assertions passed >> kafka_automation.log
    echo ASSERTIONS SUMMARY: All assertions passed
)

:: Cleanup
echo [%date% %time%] Cleaning up temporary files >> kafka_automation.log
if exist "%TEMP%\messages_to_publish.json" del "%TEMP%\messages_to_publish.json"
if exist "%TEMP_FILE%" del "%TEMP_FILE%"

echo [%date% %time%] Workflow completed >> kafka_automation.log
echo Workflow completed

pause
